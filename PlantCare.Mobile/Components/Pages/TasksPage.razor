@page "/tasks"

@using PlantCare.Mobile.Models
@using PlantCare.Mobile.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using static MudBlazor.Icons

@inject ApiConnectionService<TaskType> ApiService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px;">
    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Task Types</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ToggleAddTaskForm">Add New Task Type</MudButton>

    @if (ShowAddTaskForm)
    {
        <MudContainer Style="margin-top:20px; padding:20px; background-color:#f8f8f8; border-radius:8px;">
            <MudText Typo="Typo.h6" GutterBottom="true">Add New Plant Task Type</MudText>
            <MudTextField Label="Name" @bind-Value="NewTaskType.Name" Required="true" Error="!NameIsValid" ErrorText="Name is required." />
            <MudTextField Label="Description" @bind-Value="NewTaskType.Description" />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddTaskType">Add</MudButton>
        </MudContainer>
    }

    <MudGrid Style="margin-top:20px;">
        @if (TaskTypeList == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </MudItem>
        }
        else
        {
            @foreach (var taskType in TaskTypeList)
            {
                <MudItem xs="12" md="6">
                    <MudCard Style="margin-bottom:20px;">
                        @if (SelectedTaskTypeId == taskType.Id)
                        {
                            <MudCardContent>
                                <MudTextField Label="Name" @bind-Value="taskType.Name" />
                                <MudTextField Label="Description" @bind-Value="taskType.Description" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => SaveTaskType(taskType)">Save</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelEdit">Cancel</MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@taskType.Name</MudText>
                                <MudText>@taskType.Description</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => GoToPlants(taskType.Id)">See plants</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="() => EditTaskType(taskType)">Edit</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteTaskType(taskType.Id)">Delete</MudButton>
                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    List<TaskType> TaskTypeList = new();
    int SelectedTaskTypeId = 0;
    bool ShowAddTaskForm = false;
    bool NameIsValid = true;
    TaskType NewTaskType = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTaskTypes();
    }

    private async Task LoadTaskTypes()
    {
        var allTaskTypes = await ApiService.GetAllAsync("TaskTypes");
        TaskTypeList = allTaskTypes.Where(tt => tt.IsActive).ToList();
    }

    private void ToggleAddTaskForm()
    {
        ShowAddTaskForm = !ShowAddTaskForm;
    }

    private async Task AddTaskType()
    {
        NameIsValid = !string.IsNullOrWhiteSpace(NewTaskType.Name);

        if (NameIsValid)
        {
            await ApiService.PostAsync("TaskTypes", NewTaskType);
            await LoadTaskTypes(); // Reload task types after addition
            NewTaskType = new TaskType(); // Reset the NewTaskType object
            ShowAddTaskForm = false; // Hide the form after addition
        }
    }

    private void EditTaskType(TaskType taskType)
    {
        SelectedTaskTypeId = taskType.Id;
    }

    private async Task SaveTaskType(TaskType taskType)
    {
        await ApiService.PutAsync($"TaskTypes/{taskType.Id}", taskType);
        SelectedTaskTypeId = 0; // Reset to exit edit mode
    }

    private void CancelEdit()
    {
        SelectedTaskTypeId = 0; // Reset to exit edit mode
    }

    private async Task DeleteTaskType(int taskTypeId)
    {
        await ApiService.DeleteAsync($"TaskTypes/{taskTypeId}");
        await LoadTaskTypes(); // Reload task types after deletion
    }

    private void GoToPlants(int taskTypeId)
    {
        Navigation.NavigateTo($"/tasks/plants/{taskTypeId}");
    }
}
