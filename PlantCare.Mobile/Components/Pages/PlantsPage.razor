@page "/plants"

@using PlantCare.Mobile.Models
@using PlantCare.Mobile.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using static MudBlazor.Icons

@inject ApiConnectionService<Plant> ApiService
@inject ApiConnectionService<Species> SpeciesService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px;">
    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Plants</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ToggleAddPlantForm">Add New Plant</MudButton>

    @if (ShowAddPlantForm)
    {
        <MudContainer Style="margin-top:20px; padding:20px; background-color:#e8f5e9; border-radius:8px;">
            <MudText Typo="Typo.h6" GutterBottom="true" Style="color: #2e7d32;">Add New Plant</MudText>
            <MudTextField Label="Name" @bind-Value="NewPlant.Name" Required="true" Error="!NameIsValid" ErrorText="Name is required." />
            <MudTextField Label="Description" @bind-Value="NewPlant.Description" />
            <MudSelect T="int" Label="Species" @bind-Value="NewPlantSpeciesId" Required="true" Error="!SpeciesIsValid" ErrorText="Species is required.">
                @foreach (var species in ActiveSpeciesList)
                {
                    <MudSelectItem Value="@species.Id">@species.Name</MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker Label="Last Watering Date" @bind-Date="NewPlant.LastWateringDate" />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddPlant">Add</MudButton>
        </MudContainer>
    }

    <MudGrid Style="margin-top:20px;">
        @if (PlantList == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </MudItem>
        }
        else
        {
            @foreach (var plant in PlantList)
            {
                <MudItem xs="12" md="6">
                    <MudCard Class="card border-success shadow" Style="margin-bottom:20px; border-color: #2e7d32; box-shadow: 0 4px 8px rgba(46, 125, 50, 0.2);">
                        @if (SelectedPlantId == plant.Id)
                        {
                            <MudCardContent Style="background-color: #e8f5e9;">
                                <MudTextField Label="Name" @bind-Value="plant.Name" />
                                <MudTextField Label="Description" @bind-Value="plant.Description" Text="textarea" />
                                <MudSelect T="int" Label="Species" @bind-Value="plant.SpeciesId" Required="true">
                                    @foreach (var species in ActiveSpeciesList)
                                    {
                                        <MudSelectItem Value="@species.Id">@species.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudDatePicker Label="Last Watering Date" @bind-Date="plant.LastWateringDate" MaxDate="DateTime.Now" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => SavePlant(plant)">Save</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelEdit">Cancel</MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            <MudCardContent Style="background-color: #e8f5e9;">
                                <MudText Typo="Typo.h6" Style="color: #2e7d32;">@plant.Name</MudText>
                                <MudText Style="color: #388e3c;">@plant.Description</MudText>
                                <MudText Style="color: #388e3c;"><strong>Last Watering Date:</strong> @plant.LastWateringDate?.ToString("yyyy-MM-dd")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => GoToDetails(plant.Id)">Details</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="() => EditPlant(plant)">Edit</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeletePlant(plant.Id)">Delete</MudButton>
                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    List<Plant> PlantList;
    List<Species> ActiveSpeciesList;
    int SelectedPlantId;
    bool ShowAddPlantForm = false;
    bool NameIsValid = true;
    bool SpeciesIsValid = true;
    Plant NewPlant = new Plant();
    int NewPlantSpeciesId;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlants();
        await LoadActiveSpecies();
        SelectedPlantId = 0;
    }

    private async Task LoadPlants()
    {
        var allPlants = await ApiService.GetAllAsync("Plants");
        PlantList = allPlants.Where(p => p.IsActive).ToList();
    }

    private async Task LoadActiveSpecies()
    {
        ActiveSpeciesList = await SpeciesService.GetAllAsync("Species");
    }

    private void ToggleAddPlantForm()
    {
        ShowAddPlantForm = !ShowAddPlantForm;
    }

    private async Task AddPlant()
    {
        NameIsValid = !string.IsNullOrWhiteSpace(NewPlant.Name);
        SpeciesIsValid = NewPlantSpeciesId > 0;

        if (NameIsValid && SpeciesIsValid)
        {
            var species = await SpeciesService.GetByIdAsync("Species", NewPlantSpeciesId);
            if (species != null)
            {
                NewPlant.Species = species;
                NewPlant.SpeciesId = NewPlantSpeciesId;
                await ApiService.PostAsync("Plants", NewPlant);
                await LoadPlants();
                NewPlant = new Plant(); 
                ShowAddPlantForm = false; 
            }
        }
    }

    private void EditPlant(Plant plant)
    {
        SelectedPlantId = plant.Id;
    }

    private async Task SavePlant(Plant plant)
    {
        await ApiService.PutAsync($"Plants/{plant.Id}", plant);
        SelectedPlantId = 0; // Reset to exit edit mode
    }

    private void CancelEdit()
    {
        SelectedPlantId = 0; // Reset to exit edit mode
    }

    private async Task DeletePlant(int plantId)
    {
        await ApiService.DeleteAsync($"Plants/{plantId}");
        await LoadPlants(); // Reload plants after deletion
    }

    private void GoToDetails(int plantId)
    {
        Navigation.NavigateTo($"/plants/details/{plantId}");
    }
}
