@page "/tasks/plants/{taskTypeId:int}"

@using PlantCare.Mobile.Models
@using PlantCare.Mobile.Services

@inject ApiConnectionService<Plant> PlantService
@inject ApiConnectionService<PlantTask> PlantTaskService
@inject ApiConnectionService<TaskType> TaskTypeService
@inject NavigationManager Navigation
@using MudBlazor
@using static MudBlazor.Icons


<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px; border-radius:8px;">
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GoBack" StartIcon="@Icons.Material.Filled.ArrowBack">
        Back
    </MudButton>
    <MudText Typo="Typo.h4" Class="my-4" Color="Color.Primary">Plants with Task: @TaskType?.Name</MudText>

    @if (PlantList == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (PlantList.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Elevation="0" Class="my-2">No plants found with this task type.</MudAlert>
    }
    else
    {
        <MudGrid Container="true" Spacing="3">
            @foreach (var plant in PlantList)
            {
                <MudItem xs="12" sm="6" lg="3">
                    <MudCard Class="pa-2" Elevation="2" Style="background-color: #e8f5e9;">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Color="Color.Primary">@plant.Name</MudText>
                            <MudText Typo="Typo.body2" Class="mt-1">Last Watering Date: @plant.LastWateringDate?.ToString("yyyy-MM-dd")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int TaskTypeId { get; set; }

    TaskType TaskType;
    List<Plant> PlantList;

    protected override async Task OnInitializedAsync()
    {
        TaskType = await TaskTypeService.GetByIdAsync("TaskTypes", TaskTypeId);
        var allPlantTasks = await PlantTaskService.GetAllAsync("PlantTasks");
        var plantTaskIds = allPlantTasks.Where(pt => pt.TaskTypeId == TaskTypeId && pt.IsActive).Select(pt => pt.PlantId).ToList();

        var allPlants = await PlantService.GetAllAsync("Plants");
        PlantList = allPlants.Where(p => plantTaskIds.Contains(p.Id) && p.IsActive).ToList();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/tasks");
    }
}
