@page "/tasks/plants/{taskTypeId:int}"

@using PlantCare.Web.Models
@using PlantCare.Web.Services

@inject ApiConnectionService<Plant> PlantService
@inject ApiConnectionService<PlantTask> PlantTaskService
@inject ApiConnectionService<TaskType> TaskTypeService
@inject NavigationManager Navigation

<div class="page">
    <button class="btn-back" @onclick="GoBack">
        <span class="arrow-icon">&larr;</span>
    </button>
    <h1 class="my-4">Plants with Task: @TaskType?.Name</h1>

    @if (PlantList == null)
    {
        <div class="loading-spinner">
            <div class="spinner-border" role="status"></div>
        </div>
    }
    else if (PlantList.Count == 0)
    {
        <p>No plants found with this task type.</p>
    }
    else
    {
        <div class="row gy-4">
            @foreach (var plant in PlantList)
            {
                <div class="col-sm-12 col-md-6 col-lg-3">
                    <div class="card border-success shadow">
                        <div class="card-body">
                            <h5 class="card-title">@plant.Name</h5>
                            <p>Last Watering Date: @plant.LastWateringDate?.ToString("yyyy-MM-dd")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int TaskTypeId { get; set; }

    TaskType TaskType;
    List<Plant> PlantList;

    protected override async Task OnInitializedAsync()
    {
        TaskType = await TaskTypeService.GetByIdAsync("TaskTypes", TaskTypeId);
        var allPlantTasks = await PlantTaskService.GetAllAsync("PlantTasks");
        var plantTaskIds = allPlantTasks.Where(pt => pt.TaskTypeId == TaskTypeId && pt.IsActive).Select(pt => pt.PlantId).ToList();

        var allPlants = await PlantService.GetAllAsync("Plants");
        PlantList = allPlants.Where(p => plantTaskIds.Contains(p.Id) && p.IsActive).ToList();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/tasks");
    }
}
