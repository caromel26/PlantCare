@page "/plants"

@using PlantCare.Web.Models
@using PlantCare.Web.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using static MudBlazor.Icons

@inject ApiConnectionService<Plant> ApiService
@inject ApiConnectionService<Species> SpeciesService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px;">
    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Plants</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ToggleAddPlantForm">Add New Plant</MudButton>

    @if (ShowAddPlantForm)
    {
        <MudContainer Style="margin-top:20px; padding:20px; background-color:#f8f8f8; border-radius:8px;">
            <MudText Typo="Typo.h6" GutterBottom="true">Add New Plant</MudText>
            <MudTextField Label="Name" @bind-Value="NewPlant.Name" Required="true" Error="!NameIsValid" ErrorText="Name is required." />
            <MudTextField Label="Description" @bind-Value="NewPlant.Description" Text="textarea" />
            <MudTextField Label="Species Id" @bind-Value="NewPlantSpeciesId" />
            <MudDatePicker Label="Last Watering Date" @bind-Date="NewPlant.LastWateringDate" />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddPlant">Add</MudButton>
        </MudContainer>
    }

    <MudGrid Style="margin-top:20px;">
        @if (PlantList == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </MudItem>
        }
        else
        {
            @foreach (var plant in PlantList)
            {
                <MudItem xs="12" md="6">
                    <MudCard Style="margin-bottom:20px;">
                        @if (SelectedPlantId == plant.Id)
                        {
                            <MudCardContent>
                                <MudTextField Label="Name" @bind-Value="plant.Name" />
                                <MudTextField Label="Description" @bind-Value="plant.Description" Text="textarea" />
                                <MudTextField Label="Species Id" @bind-Value="plant.SpeciesId" />
                                <MudDatePicker Label="Last Watering Date" @bind-Date="plant.LastWateringDate" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => SavePlant(plant)">Save</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelEdit">Cancel</MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@plant.Name</MudText>
                                <MudText>@plant.Description</MudText>
                                <MudText><strong>Last Watering Date:</strong> @plant.LastWateringDate?.ToString("yyyy-MM-dd")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => GoToDetails(plant.Id)">Details</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="() => EditPlant(plant)">Edit</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeletePlant(plant.Id)">Delete</MudButton>
                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    List<Plant> PlantList;
    int SelectedPlantId;
    bool ShowAddPlantForm = false;
    bool NameIsValid = true;
    Plant NewPlant = new Plant();
    int NewPlantSpeciesId;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlants();
        SelectedPlantId = 0;
    }

    private async Task LoadPlants()
    {
        var allPlants = await ApiService.GetAllAsync("Plants");
        PlantList = allPlants.Where(p => p.IsActive).ToList();
    }

    private void ToggleAddPlantForm()
    {
        ShowAddPlantForm = !ShowAddPlantForm;
    }

    private async Task AddPlant()
    {
        NameIsValid = !string.IsNullOrWhiteSpace(NewPlant.Name);

        if (NameIsValid)
        {
            var species = await SpeciesService.GetByIdAsync("Species", NewPlantSpeciesId);
            if (species != null)
            {
                NewPlant.Species = species;
                NewPlant.SpeciesId = NewPlantSpeciesId;
                await ApiService.PostAsync("Plants", NewPlant);
                await LoadPlants(); // Reload plants after addition
                NewPlant = new Plant(); // Reset the NewPlant object
                ShowAddPlantForm = false; // Hide the form after addition
            }
            else
            {
                // Handle case where species is not found
            }
        }
    }

    private async void EditPlant(Plant plant)
    {
        SelectedPlantId = plant.Id;
        await LoadPlants();
    }

    private async Task SavePlant(Plant plant)
    {
        plant.Species = await SpeciesService.GetByIdAsync("Species", plant.SpeciesId);

        await ApiService.PutAsync($"Plants/{plant.Id}", plant);
        SelectedPlantId = 0; // Reset to exit edit mode
    }

    private void CancelEdit()
    {
        SelectedPlantId = 0; // Reset to exit edit mode
    }

    private async Task DeletePlant(int plantId)
    {
        await ApiService.DeleteAsync($"Plants/{plantId}");
        await LoadPlants(); // Reload plants after deletion
    }

    private void GoToDetails(int plantId)
    {
        Navigation.NavigateTo($"/plants/details/{plantId}");
    }
}
