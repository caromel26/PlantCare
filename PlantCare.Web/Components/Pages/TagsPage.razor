@page "/tags"

@using PlantCare.Web.Models
@using PlantCare.Web.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using static MudBlazor.Icons

@inject ApiConnectionService<Tag> ApiService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px;">
    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Plant Tags</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ToggleAddTagForm">Add New Tag</MudButton>

    @if (ShowAddTagForm)
    {
        <MudContainer Style="margin-top:20px; padding:20px; background-color:#f8f8f8; border-radius:8px;">
            <MudText Typo="Typo.h6" GutterBottom="true">Add New Plant Tag</MudText>
            <MudTextField Label="Name" @bind-Value="NewTag.Name" Required="true" Error="!NameIsValid" ErrorText="Name is required." />
            <MudTextField Label="Description" @bind-Value="NewTag.Description" />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddTag">Add</MudButton>
        </MudContainer>
    }

    <MudGrid Style="margin-top:20px;">
        @if (TagList == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </MudItem>
        }
        else
        {
            @foreach (var tag in TagList)
            {
                <MudItem xs="12" md="6">
                    <MudCard Style="margin-bottom:20px;">
                        @if (SelectedTagId == tag.Id)
                        {
                            <MudCardContent>
                                <MudTextField Label="Name" @bind-Value="tag.Name" />
                                <MudTextField Label="Description" @bind-Value="tag.Description" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => SaveTag(tag)">Save</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelEdit">Cancel</MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@tag.Name</MudText>
                                <MudText>@tag.Description</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => GoToPlants(tag.Id)">See plants</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="() => EditTag(tag)">Edit</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteTag(tag.Id)">Delete</MudButton>
                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    List<Tag> TagList = new();
    int SelectedTagId = 0;
    bool ShowAddTagForm = false;
    bool NameIsValid = true;
    Tag NewTag = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTags();
    }

    private async Task LoadTags()
    {
        var allTags = await ApiService.GetAllAsync("Tags");
        TagList = allTags.Where(s => s.IsActive).ToList();
    }

    private void ToggleAddTagForm()
    {
        ShowAddTagForm = !ShowAddTagForm;
    }

    private async Task AddTag()
    {
        NameIsValid = !string.IsNullOrWhiteSpace(NewTag.Name);

        if (NameIsValid)
        {
            await ApiService.PostAsync("Tags", NewTag);
            await LoadTags(); // Reload tags after addition
            NewTag = new Tag(); // Reset the NewTag object
            ShowAddTagForm = false; // Hide the form after addition
        }
    }

    private void EditTag(Tag tag)
    {
        SelectedTagId = tag.Id;
    }

    private async Task SaveTag(Tag tag)
    {

        await ApiService.PutAsync($"Tags/{tag.Id}", tag);
        SelectedTagId = 0; // Reset to exit edit mode

    }

    private void CancelEdit()
    {
        SelectedTagId = 0; // Reset to exit edit mode
    }

    private async Task DeleteTag(int tagId)
    {
        await ApiService.DeleteAsync($"Tags/{tagId}");
        await LoadTags(); // Reload tags after deletion
    }

    private void GoToPlants(int tagId)
    {
        Navigation.NavigateTo($"/tags/plants/{tagId}");
    }
}
