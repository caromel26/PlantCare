@page "/species"

@using PlantCare.Web.Models
@using PlantCare.Web.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using static MudBlazor.Icons

@inject ApiConnectionService<Species> ApiService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px;">
    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Plant Species</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ToggleAddSpeciesForm">Add New Species</MudButton>

    @if (ShowAddSpeciesForm)
    {
        <MudContainer Style="margin-top:20px; padding:20px; background-color:#e8f5e9; border-radius:8px;">
            <MudText Typo="Typo.h6" GutterBottom="true" Style="color: #2e7d32;">Add New Plant Species</MudText>
            <MudTextField Label="Name" @bind-Value="NewSpecies.Name" Required="true" Error="!NameIsValid" ErrorText="Name is required." />
            <MudTextField Label="Description" @bind-Value="NewSpecies.Description" />
            <MudTextField Label="Watering Frequency" @bind-Value="NewSpecies.WateringFrequency" />
            <MudTextField Label="Sunlight Requirements" @bind-Value="NewSpecies.SunlightRequirements" />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddSpecies">Add</MudButton>
        </MudContainer>
    }

    <MudGrid Style="margin-top:20px;">
        @if (SpeciesList == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </MudItem>
        }
        else
        {
            @foreach (var species in SpeciesList)
            {
                <MudItem xs="12" md="6">
                    <MudCard Class="card border-success shadow" Style="margin-bottom:20px; border-color: #2e7d32; box-shadow: 0 4px 8px rgba(46, 125, 50, 0.2);">
                        @if (SelectedSpeciesId == species.Id)
                        {
                            <MudCardContent Style="background-color: #e8f5e9;">
                                <MudTextField Label="Name" @bind-Value="species.Name" />
                                <MudTextField Label="Description" @bind-Value="species.Description" Text="textarea" />
                                <MudTextField Label="Watering Frequency" @bind-Value="species.WateringFrequency" />
                                <MudTextField Label="Sunlight Requirements" @bind-Value="species.SunlightRequirements" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => SaveSpecies(species)">Save</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelEdit">Cancel</MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            <MudCardContent Style="background-color: #e8f5e9;">
                                <MudText Typo="Typo.h6" Style="color: #2e7d32;">@species.Name</MudText>
                                <MudText Style="color: #388e3c;">@species.Description</MudText>
                                <MudText Style="color: #388e3c;"><strong>Watering Frequency:</strong> @species.WateringFrequency</MudText>
                                <MudText Style="color: #388e3c;"><strong>Sunlight Requirements:</strong> @species.SunlightRequirements</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => GoToPlants(species.Id)">See plants</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="() => EditSpecies(species)">Edit</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteSpecies(species.Id)">Delete</MudButton>
                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    List<Species> SpeciesList;
    int SelectedSpeciesId;
    bool ShowAddSpeciesForm = false;
    bool NameIsValid = true;
    Species NewSpecies = new Species();

    protected override async Task OnInitializedAsync()
    {
        await LoadSpecies();
        SelectedSpeciesId = 0;
    }

    private async Task LoadSpecies()
    {
        var allSpecies = await ApiService.GetAllAsync("Species");
        SpeciesList = allSpecies.Where(s => s.IsActive).ToList();
    }

    private void ToggleAddSpeciesForm()
    {
        ShowAddSpeciesForm = !ShowAddSpeciesForm;
    }

    private async Task AddSpecies()
    {
        NameIsValid = !string.IsNullOrWhiteSpace(NewSpecies.Name);

        if (NameIsValid)
        {
            await ApiService.PostAsync("Species", NewSpecies);
            await LoadSpecies();
            NewSpecies = new Species();
            ShowAddSpeciesForm = false;
        }
    }

    private void EditSpecies(Species species)
    {
        SelectedSpeciesId = species.Id;
    }

    private async Task SaveSpecies(Species species)
    {
        await ApiService.PutAsync($"Species/{species.Id}", species);
        SelectedSpeciesId = 0;
    }

    private void CancelEdit()
    {
        SelectedSpeciesId = 0;
    }

    private async Task DeleteSpecies(int speciesId)
    {
        await ApiService.DeleteAsync($"Species/{speciesId}");
        await LoadSpecies();
    }

    private void GoToPlants(int speciesId)
    {
        Navigation.NavigateTo($"/species/plants/{speciesId}");
    }
}
