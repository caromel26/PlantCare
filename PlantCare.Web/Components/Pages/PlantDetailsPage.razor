@page "/plants/details/{id:int}"

@using PlantCare.Web.Models
@using PlantCare.Web.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using static MudBlazor.Icons

@inject ApiConnectionService<Plant> ApiService
@inject ApiConnectionService<Species> SpeciesService
@inject ApiConnectionService<PlantTask> PlantTaskService
@inject ApiConnectionService<TaskType> TaskTypeService
@inject ApiConnectionService<Note> NoteService
@inject ApiConnectionService<Tag> TagService
@inject ApiConnectionService<PlantTag> PlantTagService
@inject ApiConnectionService<Reminder> ReminderService
@inject BusinessLogicService BusinessService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin:auto; padding:20px;">
    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Text" OnClick="GoBack">Back</MudButton>
    <MudText Typo="Typo.h4" GutterBottom="true">Plant Details</MudText>

    @if (Plant == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
        <MudPaper Elevation="2" Style="padding:20px; margin-bottom:20px;">
            <MudText Typo="Typo.h5">@Plant.Name</MudText>
            <MudText>@Plant.Description</MudText>
            <MudText><strong>Species:</strong> @Species?.Name</MudText>
            <MudText>
                <strong>Last Watering Date:</strong> @Plant.LastWateringDate?.ToString("yyyy-MM-dd")
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="WaterPlant" Style="margin-left:10px;">Water Plant</MudButton>
            </MudText>
            @if (Species != null)
            {
                <MudText><strong>Watering Frequency:</strong> @Species.WateringFrequency</MudText>
                <MudText><strong>Sunlight Requirements:</strong> @Species.SunlightRequirements</MudText>
            }
        </MudPaper>

        <MudPaper Elevation="2" Style="padding:20px; margin-bottom:20px;">
            <MudText Typo="Typo.h6">Tasks</MudText>
            @foreach (var task in PlantTasks)
            {
                <MudExpansionPanel Text="@task.TaskType.Name">
                    <MudText>Due: @task.DueDate?.ToString("yyyy-MM-dd")</MudText>
                    @if (task.CompletionStatus)
                    {
                        <MudText Color="Color.Success">(Completed)</MudText>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="() => MarkTaskAsCompleted(task.Id)">Mark as Completed</MudButton>
                    }
                </MudExpansionPanel>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleTaskForm" Style="margin-top:10px;">Add Task</MudButton>
        </MudPaper>

        @if (ShowAddTaskForm)
        {
            <MudPaper Elevation="2" Style="padding:20px; margin-bottom:20px;">
                <MudText Typo="Typo.h6">Add Task</MudText>
                <MudForm>
                    <MudSelect @bind-Value="NewTask.TaskTypeId" Label="Task Type" Required="true">
                        @foreach (var taskType in TaskTypes)
                        {
                            <MudSelectItem Value="@taskType.Id">@taskType.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudDatePicker @bind-Date="NewTask.DueDate" Label="Due Date" MinDate="@DateTime.Now" />
                    <MudCheckBox @bind-Checked="NewTask.CompletionStatus" Label="Completed" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddTask" Style="margin-top:10px;">Add Task</MudButton>
                </MudForm>
            </MudPaper>
        }

        <MudPaper Elevation="2" Style="padding:20px; margin-bottom:20px;">
            <MudText Typo="Typo.h6">Tags</MudText>
            @foreach (var tag in PlantTags)
            {
                <MudChip Style="margin: 5px;">@tag.Tag.Name</MudChip>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleTagForm" Style="margin-top:10px;">Add Tag</MudButton>
        </MudPaper>

        @if (ShowAddTagForm)
        {
            <MudPaper Elevation="2" Style="padding:20px; margin-bottom:20px;">
                <MudText Typo="Typo.h6">Add Tag</MudText>
                <MudForm>
                    <MudSelect @bind-Value="NewTag.TagId" Label="Tag" Required="true">
                        @foreach (var tag in AvailableTags)
                        {
                            <MudSelectItem Value="@tag.Id">@tag.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddTag" Style="margin-top:10px;">Add Tag</MudButton>
                </MudForm>
            </MudPaper>
        }

        @if (HasReminder)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="UpdateReminder" Style="margin-top:10px;">Update Reminder</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="AddReminder" Style="margin-top:10px;">Add Reminder</MudButton>
        }
    }
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    Plant Plant;
    Species Species;
    PlantTask NewTask;
    PlantTag NewTag;

    List<PlantTag> PlantTags = new();
    List<PlantTask> PlantTasks = new();
    List<Note> PlantNotes = new();
    List<Reminder> Reminders = new();

    bool ShowAddTaskForm = false;
    bool ShowAddTagForm = false;
    bool ShowAddNoteForm = false;

    bool NoteIsValid = true;
    bool TaskTypeIsValid = true;
    bool TagIsValid = true;

    bool HasReminder = false;
    Reminder PlantReminder;

    List<TaskType> TaskTypes = new();
    List<Tag> Tags = new();
    List<Tag> AvailableTags = new();

    protected override async Task OnInitializedAsync()
    {
        Plant = await ApiService.GetByIdAsync("Plants", Id);
        if (Plant?.SpeciesId != null)
        {
            Species = await SpeciesService.GetByIdAsync("Species", (int)Plant.SpeciesId);
        }

        TaskTypes = await TaskTypeService.GetAllAsync("TaskTypes");
        Tags = await TagService.GetAllAsync("Tags");

        PlantTags = await PlantTagService.GetByPlantIdAsync("PlantTags", Id);
        PlantTasks = await PlantTaskService.GetByPlantIdAsync("PlantTasks", Id);

        PlantTags = PlantTags.Where(x => x.PlantId == Id).ToList();
        PlantTasks = PlantTasks.Where(x => x.PlantId == Id).ToList();

        NewTask = new PlantTask { PlantId = Id };
        NewTag = new PlantTag { PlantId = Id };

        AvailableTags = Tags.Where(t => !PlantTags.Any(pt => pt.TagId == t.Id)).ToList();

        Reminders = await ReminderService.GetByPlantIdAsync("Reminders", Id);
        PlantReminder = Reminders.FirstOrDefault(reminder => reminder.PlantId == Id);
        HasReminder = PlantReminder != null;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/plants");
    }

    private void ToggleTaskForm()
    {
        ShowAddTaskForm = !ShowAddTaskForm;
    }

    private void ToggleTagForm()
    {
        ShowAddTagForm = !ShowAddTagForm;
    }

    private async Task AddTask()
    {
        TaskTypeIsValid = NewTask.TaskTypeId > 0;
        if (TaskTypeIsValid)
        {
            var taskType = await TaskTypeService.GetByIdAsync("TaskTypes", NewTask.TaskTypeId);
            var plant = await ApiService.GetByIdAsync("Plants", Id);

            NewTask.TaskTypeId = taskType.Id;
            NewTask.PlantId = plant.Id;
            NewTask.TaskType = taskType;
            NewTask.Plant = plant;

            await PlantTaskService.PostAsync("PlantTasks", NewTask);
            PlantTasks = await PlantTaskService.GetByPlantIdAsync("PlantTasks", Id);
            PlantTasks = PlantTasks.Where(x => x.PlantId == Id).ToList();
            NewTask = new PlantTask { PlantId = Id };
            ShowAddTaskForm = false;
        }
    }

    private async Task AddTag()
    {
        TagIsValid = NewTag.TagId > 0;
        if (TagIsValid)
        {
            var tag = await TagService.GetByIdAsync("Tags", NewTag.TagId);
            var plant = await ApiService.GetByIdAsync("Plants", Id);

            NewTag.TagId = tag.Id;
            NewTag.PlantId = plant.Id;
            NewTag.Tag = tag;
            NewTag.Plant = plant;

            await PlantTagService.PostAsync("PlantTags", NewTag);
            PlantTags = await PlantTagService.GetByPlantIdAsync("PlantTags", Id);
            PlantTags = PlantTags.Where(x => x.PlantId == Id).ToList();

            AvailableTags = Tags.Where(t => !PlantTags.Any(pt => pt.TagId == t.Id)).ToList();

            NewTag = new PlantTag { PlantId = Id };
            ShowAddTagForm = false;
        }
    }

    private async Task MarkTaskAsCompleted(int taskId)
    {
        var task = PlantTasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.CompletionStatus = true;
            await PlantTaskService.PutAsync($"PlantTasks/{taskId}", task);
            PlantTasks = await PlantTaskService.GetByPlantIdAsync("PlantTasks", Id);
            PlantTasks = PlantTasks.Where(x => x.PlantId == Id).ToList();
        }
    }

    private async Task WaterPlant()
    {
        try
        {
            await BusinessService.WaterPlant("PlantCare", Id);
            Plant.LastWateringDate = DateTime.Now;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error watering plant: {ex.Message}");
        }
    }

    private async Task AddReminder()
    {
        var uncompletedTasks = PlantTasks.Count(task => !task.CompletionStatus);
        var reminder = new Reminder
            {
                Name = $"Plant {Plant.Name}",
                Description = $"This plant has {uncompletedTasks} uncompleted tasks",
                PlantId = Plant.Id,
                Plant = Plant
            };

        await ReminderService.PostAsync("Reminders", reminder);
        HasReminder = true;
        PlantReminder = reminder;
        StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateReminder()
    {
        if (PlantReminder != null)
        {
            var uncompletedTasks = PlantTasks.Count(task => !task.CompletionStatus);
            PlantReminder.Description = $"This plant has {uncompletedTasks} uncompleted tasks";
            await ReminderService.PutAsync($"Reminders/{PlantReminder.Id}", PlantReminder);
            StateHasChanged();
            await InvokeAsync(StateHasChanged);
        }
    }
}
