@page "/plants/details/{id:int}"

@using PlantCare.Web.Models
@using PlantCare.Web.Services
@using System.ComponentModel.DataAnnotations

@inject ApiConnectionService<Plant> ApiService
@inject ApiConnectionService<Species> SpeciesService
@inject ApiConnectionService<PlantTask> PlantTaskService
@inject ApiConnectionService<TaskType> TaskTypeService
@inject ApiConnectionService<Note> NoteService
@inject ApiConnectionService<Tag> TagService
@inject ApiConnectionService<PlantTag> PlantTagService
@inject ApiConnectionService<Reminder> ReminderService
@inject BusinessLogicService BusinessService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<div class="page">
    <button class="btn-back" @onclick="GoBack">
        <span class="arrow-icon">&larr;</span>
    </button>
    <h1 class="page-title">Plant Details</h1>

    @if (Plant == null)
    {
        <div class="loading-spinner">
            <div class="spinner-border" role="status"></div>
        </div>
    }
    else
    {
        <div class="item-info">
            <h2>@Plant.Name</h2>
            <p>@Plant.Description</p>
            <p><strong>Species:</strong> @Species?.Name</p>
            <p>
                <strong>Last Watering Date:</strong> @Plant.LastWateringDate?.ToString("yyyy-MM-dd")
                <button class="btn-water" @onclick="WaterPlant">Water Plant</button>
            </p>
            @if (Species != null)
            {
                <p><strong>Watering Frequency:</strong> @Species.WateringFrequency</p>
                <p><strong>Sunlight Requirements:</strong> @Species.SunlightRequirements</p>
            }
        </div>
       
        <div class="tasks">
            <h2>Tasks</h2>
            @foreach (var task in PlantTasks)
            {
                <div class="task-item">
                    <p>
                        <strong>@task.TaskType.Name:</strong> Due @task.DueDate?.ToString("yyyy-MM-dd")
                        @if (task.CompletionStatus)
                        {
                            <span>(Completed)</span>
                        }
                        else
                        {
                            <button class="btn-complete" @onclick="() => MarkTaskAsCompleted(task.Id)">Mark as Completed</button>
                        }
                    </p>
                </div>
            }
            <button class="btn-add-task" @onclick="ToggleTaskForm">Add Task</button>
        </div>
        @if (ShowAddTaskForm)
        {
            <div class="add-task">
                <h2>Add Task</h2>
                <div class="input-fields">
                    <select @bind="NewTask.TaskTypeId" class="@((TaskTypeIsValid ? "" : "input-invalid"))">
                        <option value="">Select Task Type</option>
                        @foreach (var taskType in TaskTypes)
                        {
                            <option value="@taskType.Id">@taskType.Name</option>
                        }
                    </select>
                    <input type="date" @bind="NewTask.DueDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <input type="checkbox" @bind="NewTask.CompletionStatus" /> Completed
                </div>
                @if (!TaskTypeIsValid)
                {
                    <div class="error-message">Task Type is required.</div>
                }
                <button class="btn-add" @onclick="AddTask">Add Task</button>
            </div>
        }

        <div class="tags-section">
            <h2>Tags</h2>
            @foreach (var tag in PlantTags)
            {
                <div class="tag-item">
                    <p>@tag.Tag.Name</p>
                </div>
            }
            <button class="btn-add" @onclick="ToggleTagForm">Add Tag</button>
        </div>

        @if (ShowAddTagForm)
        {
            <div class="add-tag-form">
                <h2>Add Tag</h2>
                <div class="input-fields">
                    <select @bind="NewTag.TagId" class="@((TagIsValid ? "" : "input-invalid"))">
                        <option value="">Select Tag</option>
                        @foreach (var tag in AvailableTags)
                        {
                            <option value="@tag.Id">@tag.Name</option>
                        }
                    </select>
                </div>
                @if (!TagIsValid)
                {
                    <div class="error-message">Tag is required.</div>
                }
                <button class="btn-add" @onclick="AddTag">Add Tag</button>
            </div>
        }

        @if (!HasReminder)
        {
            <button class="btn-add-reminder" @onclick="AddReminder">Add Reminder</button>
        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Plant Plant;
    Species Species;
    PlantTask NewTask;
    PlantTag NewTag;

    List<PlantTag> PlantTags = new();
    List<PlantTask> PlantTasks = new();
    List<Note> PlantNotes = new();
    List<Reminder> Reminders = new();

    bool ShowAddTaskForm = false;
    bool ShowAddTagForm = false;
    bool ShowAddNoteForm = false;

    bool NoteIsValid = true;
    bool TaskTypeIsValid = true;
    bool TagIsValid = true;

    bool HasReminder = false;

    List<TaskType> TaskTypes = new();
    List<Tag> Tags = new();
    List<Tag> AvailableTags = new();

    protected override async Task OnInitializedAsync()
    {
        Plant = await ApiService.GetByIdAsync("Plants", Id);
        if (Plant?.SpeciesId != null)
        {
            Species = await SpeciesService.GetByIdAsync("Species", (int)Plant.SpeciesId);
        }

        TaskTypes = await TaskTypeService.GetAllAsync("TaskTypes");
        Tags = await TagService.GetAllAsync("Tags");

        PlantTags = await PlantTagService.GetByPlantIdAsync("PlantTags", Id);
        PlantTasks = await PlantTaskService.GetByPlantIdAsync("PlantTasks", Id);

        PlantTags = PlantTags.Where(x => x.PlantId == Id).ToList();
        PlantTasks = PlantTasks.Where(x => x.PlantId == Id).ToList();

        NewTask = new PlantTask { PlantId = Id };
        NewTag = new PlantTag { PlantId = Id };

        AvailableTags = Tags.Where(t => !PlantTags.Any(pt => pt.TagId == t.Id)).ToList();

        HasReminder = Reminders.Any(reminder => reminder.PlantId == Id);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/plants");
    }

    private void ToggleTaskForm()
    {
        ShowAddTaskForm = !ShowAddTaskForm;
    }

    private void ToggleTagForm()
    {
        ShowAddTagForm = !ShowAddTagForm;
    }

    private async Task AddTask()
    {
        TaskTypeIsValid = NewTask.TaskTypeId > 0;
        if (TaskTypeIsValid)
        {
            var taskType = await TaskTypeService.GetByIdAsync("TaskTypes", NewTask.TaskTypeId);
            var plant = await ApiService.GetByIdAsync("Plants", Id);

            NewTask.TaskTypeId = taskType.Id;
            NewTask.PlantId = plant.Id;
            NewTask.TaskType = taskType;
            NewTask.Plant = plant;

            await PlantTaskService.PostAsync("PlantTasks", NewTask);
            PlantTasks = await PlantTaskService.GetByPlantIdAsync("PlantTasks", Id);
            PlantTasks = PlantTasks.Where(x => x.PlantId == Id).ToList();
            NewTask = new PlantTask { PlantId = Id };
            ShowAddTaskForm = false;
        }
    }

    private async Task AddTag()
    {
        TagIsValid = NewTag.TagId > 0;
        if (TagIsValid)
        {
            var tag = await TagService.GetByIdAsync("Tags", NewTag.TagId);
            var plant = await ApiService.GetByIdAsync("Plants", Id);

            NewTag.TagId = tag.Id;
            NewTag.PlantId = plant.Id;
            NewTag.Tag = tag;
            NewTag.Plant = plant;

            await PlantTagService.PostAsync("PlantTags", NewTag);
            PlantTags = await PlantTagService.GetByPlantIdAsync("PlantTags", Id);
            PlantTags = PlantTags.Where(x => x.PlantId == Id).ToList();

            AvailableTags = Tags.Where(t => !PlantTags.Any(pt => pt.TagId == t.Id)).ToList();

            NewTag = new PlantTag { PlantId = Id };
            ShowAddTagForm = false;
        }
    }

    private async Task MarkTaskAsCompleted(int taskId)
    {
        var task = PlantTasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.CompletionStatus = true;
            await PlantTaskService.PutAsync($"PlantTasks/{taskId}", task);
            PlantTasks = await PlantTaskService.GetByPlantIdAsync("PlantTasks", Id);
            PlantTasks = PlantTasks.Where(x => x.PlantId == Id).ToList();
        }
    }

    private async Task WaterPlant()
    {
        try
        {
            await BusinessService.WaterPlant("PlantCare", Id);
            Plant.LastWateringDate = DateTime.Now;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error watering plant: {ex.Message}");
        }
    }

    private async Task AddReminder()
    {
        var uncompletedTasks = PlantTasks.Count(task => !task.CompletionStatus);
        var reminder = new Reminder
            {
                Name = $"Plant {Plant.Name}",
                Description = $"This plant has {uncompletedTasks} uncompleted tasks",
                PlantId = Plant.Id,
                Plant = Plant
            };

        await ReminderService.PostAsync("Reminders", reminder);
        HasReminder = true;
        StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .page {
    }

    .page-title {
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }

    .item-info {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        .item-info h2 {
            margin-top: 0;
        }

    .btn-water {
        background-color: #2196f3;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 10px;
    }

    .tasks, .tags-section {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .task-item, .tag-item {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

        .task-item:last-child, .tag-item:last-child {
            border-bottom: none;
        }

    .btn-add-task, .btn-add {
        display: block;
        width: 100%;
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        text-align: center;
    }

    .btn-complete {
        background-color: #f39c12;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 10px;
    }

    .btn-add-reminder {
        display: block;
        width: 100%;
        background-color: #ff9800;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        text-align: center;
    }

    .add-task, .add-tag-form {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    .input-fields {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 10px;
    }

    .input-invalid {
        border: 1px solid red;
    }

    .error-message {
        color: red;
        font-size: 0.9em;
    }
</style>
